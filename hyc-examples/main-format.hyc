// import "@std/io" : std;
// import "@std/io";
// import "@std/io" as { { writeln } <- io } <- std;

import "@std/io";

class Participant {
    prot name_: str;

    // Fields can be changed, regardless of their mutability state
    // as long as they are being modified within the constructor
    pub fn new -> Self (name: str) {
        self.name_ = name;
        name_ = name;
    }

    pub fn delete -> void () {
        // Delete logic...
    }

    pub fn name -> str () { return name_; }
}

class Sender : Participant {}
class Receiver : Participant {}

class Message {
    prot sender_: &Sender;
    prot content_: str;

    pub fn new -> Self (sender: &Sender) {
        sender_ = sender;
    }

    pub fn delete -> void () {

    }

    pub fn sender -> const[&Sender] () { return as_const(sender_); }

    pub fn content -> str () { return content_; }

    pub fn send -> void (receiver: const[&Receiver]) {
        // Send Logic...
    }
}

struct Person {
    name: str;
    age: int[32];
}

fn main -> void (args: array[str]) {

    let some_var: int[32] = 123;

    std.io.writeln("Hello, World");

    if some_var >= 150 {
        std.io.writeln("some_var is greater than or equal to 150");
    } else std.io.writeln("some_var is lower than 150");

    let n: int[8] = 1;
    let m: int[8] = 15;
    
    // range.from(1, 5, 1); range.make(1, 5, 1); range.create(1, 5, 1);
    // 1<-2->5
    for let i : 1..5, 1 {

    }

    for let i!: ref<int[8]> <- range.make(1, 5, 1) {

    }

    let arr: array[int[32]] = {1, 2, 3};
    for let val: int[32] <- arr {
        std.io.write("{val} ");
    }

    let some_bool: bool = false;

    while some_bool != false {
        std.io.writeln("something");

        if (some_var < 125) break;
        else continue;
    }
    
    return;
}
